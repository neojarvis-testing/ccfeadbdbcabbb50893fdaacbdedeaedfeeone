{"ast":null,"code":"import _asyncToGenerator from \"/home/coder/project/workspace/angularapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// edit-song.component.spec.ts\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { of } from 'rxjs';\nimport { EditSongComponent } from './edit-song.component';\nimport { SongService } from '../services/song.service';\ndescribe('EditSongComponent', () => {\n  let component;\n  let fixture;\n  let mockSongService;\n  let mockRouter;\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    mockSongService = jasmine.createSpyObj('SongService', ['getSongById', 'updateSong']);\n    mockRouter = jasmine.createSpyObj('Router', ['navigate']);\n    yield TestBed.configureTestingModule({\n      declarations: [EditSongComponent],\n      imports: [ReactiveFormsModule],\n      providers: [{\n        provide: SongService,\n        useValue: mockSongService\n      }, {\n        provide: Router,\n        useValue: mockRouter\n      }, {\n        provide: ActivatedRoute,\n        useValue: {\n          snapshot: {\n            paramMap: {\n              get: () => '1'\n            }\n          }\n        }\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(EditSongComponent);\n    component = fixture.componentInstance;\n  }));\n  fit('should_create_edit_song_component', () => {\n    expect(component).toBeTruthy();\n  });\n  fit('should_initialize_the_form_with_empty_fields', () => {\n    mockSongService.getSongById.and.returnValue(of({}));\n    component.ngOnInit();\n    expect(component.songForm.value).toEqual({\n      title: '',\n      artist: '',\n      album: '',\n      genre: '',\n      releaseDate: '',\n      duration: ''\n    });\n  });\n  fit('should_mark_form_as_invalid_when_empty', () => {\n    mockSongService.getSongById.and.returnValue(of({}));\n    component.ngOnInit();\n    expect(component.songForm.valid).toBeFalsy();\n  });\n  fit('should_mark_form_as_valid_when_all_fields_are_filled_correctly', () => {\n    mockSongService.getSongById.and.returnValue(of({}));\n    component.ngOnInit();\n    component.songForm.patchValue({\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    });\n    expect(component.songForm.valid).toBeTruthy();\n  });\n  fit('should_navigate_to_songs_list_after_successful_update', () => {\n    mockSongService.getSongById.and.returnValue(of({}));\n    mockSongService.updateSong.and.returnValue(of({}));\n    component.ngOnInit();\n    component.songForm.patchValue({\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    });\n    component.onSubmit();\n    expect(mockRouter.navigate).toHaveBeenCalledWith(['/songs']);\n  });\n  fit('should_not_call_updateSong_if_form_is_invalid', () => {\n    mockSongService.getSongById.and.returnValue(of({}));\n    component.ngOnInit();\n    component.onSubmit();\n    expect(mockSongService.updateSong).not.toHaveBeenCalled();\n  });\n});","map":{"version":3,"names":["TestBed","ReactiveFormsModule","ActivatedRoute","Router","of","EditSongComponent","SongService","describe","component","fixture","mockSongService","mockRouter","beforeEach","_asyncToGenerator","jasmine","createSpyObj","configureTestingModule","declarations","imports","providers","provide","useValue","snapshot","paramMap","get","compileComponents","createComponent","componentInstance","fit","expect","toBeTruthy","getSongById","and","returnValue","ngOnInit","songForm","value","toEqual","title","artist","album","genre","releaseDate","duration","valid","toBeFalsy","patchValue","updateSong","onSubmit","navigate","toHaveBeenCalledWith","not","toHaveBeenCalled"],"sources":["/home/coder/project/workspace/angularapp/src/app/edit-song/edit-song.component.spec.ts"],"sourcesContent":["// edit-song.component.spec.ts\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { of } from 'rxjs';\nimport { EditSongComponent } from './edit-song.component';\nimport { SongService } from '../services/song.service';\nimport { Song } from '../model/song.model';\n\ndescribe('EditSongComponent', () => {\n  let component: EditSongComponent;\n  let fixture: ComponentFixture<EditSongComponent>;\n  let mockSongService: jasmine.SpyObj<SongService>;\n  let mockRouter: jasmine.SpyObj<Router>;\n\n  beforeEach(async () => {\n    mockSongService = jasmine.createSpyObj('SongService', ['getSongById', 'updateSong']);\n    mockRouter = jasmine.createSpyObj('Router', ['navigate']);\n\n    await TestBed.configureTestingModule({\n      declarations: [ EditSongComponent ],\n      imports: [ ReactiveFormsModule ],\n      providers: [\n        { provide: SongService, useValue: mockSongService },\n        { provide: Router, useValue: mockRouter },\n        { provide: ActivatedRoute, useValue: { snapshot: { paramMap: { get: () => '1' } } } }\n      ]\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(EditSongComponent);\n    component = fixture.componentInstance;\n  });\n\n  fit('should_create_edit_song_component', () => {\n    expect((component as any)).toBeTruthy();\n  });\n\n  fit('should_initialize_the_form_with_empty_fields', () => {\n    mockSongService.getSongById.and.returnValue(of({} as Song));\n    (component as any).ngOnInit();\n    expect((component as any).songForm.value).toEqual({\n      title: '',\n      artist: '',\n      album: '',\n      genre: '',\n      releaseDate: '',\n      duration: ''\n    });\n  });\n\n  fit('should_mark_form_as_invalid_when_empty', () => {\n    mockSongService.getSongById.and.returnValue(of({} as Song));\n    (component as any).ngOnInit();\n    expect((component as any).songForm.valid).toBeFalsy();\n  });\n\n  fit('should_mark_form_as_valid_when_all_fields_are_filled_correctly', () => {\n    mockSongService.getSongById.and.returnValue(of({} as Song));\n    (component as any).ngOnInit();\n    (component as any).songForm.patchValue({\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    });\n    expect((component as any).songForm.valid).toBeTruthy();\n  });\n\n  fit('should_navigate_to_songs_list_after_successful_update', () => {\n    mockSongService.getSongById.and.returnValue(of({} as Song));\n    mockSongService.updateSong.and.returnValue(of({} as Song));\n\n    (component as any).ngOnInit();\n    (component as any).songForm.patchValue({\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    });\n    (component as any).onSubmit();\n\n    expect(mockRouter.navigate).toHaveBeenCalledWith(['/songs']);\n  });\n\n  fit('should_not_call_updateSong_if_form_is_invalid', () => {\n    mockSongService.getSongById.and.returnValue(of({} as Song));\n    (component as any).ngOnInit();\n    (component as any).onSubmit();\n\n    expect(mockSongService.updateSong).not.toHaveBeenCalled();\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}