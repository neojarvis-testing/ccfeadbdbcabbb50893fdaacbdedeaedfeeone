{"ast":null,"code":"// song.service.ts\nimport { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nlet SongService = class SongService {\n  constructor(http) {\n    this.http = http;\n    this.backendUrl = 'https://ide-ccfeadbdbcabbb50893fdaacbdedeaedfeeone.ide.exam.ly/proxy/3001/songs'; // Update this URL to match your backend endpoint for songs\n  }\n  getSongs() {\n    return this.http.get(this.backendUrl);\n  }\n  addSong(song) {\n    return this.http.post(this.backendUrl, song);\n  }\n  updateSong(id, song) {\n    return this.http.put(`${this.backendUrl}/${id}`, song);\n  }\n  getSongById(id) {\n    return this.http.get(`${this.backendUrl}/${id}`);\n  }\n  static {\n    this.ctorParameters = () => [{\n      type: HttpClient\n    }];\n  }\n};\nSongService = __decorate([Injectable({\n  providedIn: 'root'\n})], SongService);\nexport { SongService };","map":{"version":3,"names":["Injectable","HttpClient","SongService","constructor","http","backendUrl","getSongs","get","addSong","song","post","updateSong","id","put","getSongById","__decorate","providedIn"],"sources":["/home/coder/project/workspace/angularapp/src/app/services/song.service.ts"],"sourcesContent":["// song.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Song } from '../model/song.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SongService {\n  public backendUrl = 'https://ide-ccfeadbdbcabbb50893fdaacbdedeaedfeeone.ide.exam.ly/proxy/3001/songs'; // Update this URL to match your backend endpoint for songs\n\n  constructor(private http: HttpClient) { }\n\n  getSongs(): Observable<Song[]> {\n    return this.http.get<Song[]>(this.backendUrl);\n  }\n\n  addSong(song: Song): Observable<Song> {\n    return this.http.post<Song>(this.backendUrl, song);\n  }\n\n  updateSong(id: number, song: Partial<Song>): Observable<Song> {\n    return this.http.put<Song>(`${this.backendUrl}/${id}`, song);\n  }\n\n  getSongById(id: number): Observable<Song> {\n    return this.http.get<Song>(`${this.backendUrl}/${id}`);\n  }\n}"],"mappings":"AAAA;;AAEA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,sBAAsB;AAO1C,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFjB,KAAAC,UAAU,GAAG,iFAAiF,CAAC,CAAC;EAE/D;EAExCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,UAAU,CAAC;EAC/C;EAEAG,OAAOA,CAACC,IAAU;IAChB,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAO,IAAI,CAACL,UAAU,EAAEI,IAAI,CAAC;EACpD;EAEAE,UAAUA,CAACC,EAAU,EAAEH,IAAmB;IACxC,OAAO,IAAI,CAACL,IAAI,CAACS,GAAG,CAAO,GAAG,IAAI,CAACR,UAAU,IAAIO,EAAE,EAAE,EAAEH,IAAI,CAAC;EAC9D;EAEAK,WAAWA,CAACF,EAAU;IACpB,OAAO,IAAI,CAACR,IAAI,CAACG,GAAG,CAAO,GAAG,IAAI,CAACF,UAAU,IAAIO,EAAE,EAAE,CAAC;EACxD;;;;;;;AAnBWV,WAAW,GAAAa,UAAA,EAHvBf,UAAU,CAAC;EACVgB,UAAU,EAAE;CACb,CAAC,C,EACWd,WAAW,CAoBvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}