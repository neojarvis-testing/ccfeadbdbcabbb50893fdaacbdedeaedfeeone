{"ast":null,"code":"// add-song.component.spec.ts\nimport { TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { AddSongComponent } from './add-song.component';\nimport { SongService } from '../services/song.service';\nimport { of } from 'rxjs';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\ndescribe('AddSongComponent', () => {\n  let component;\n  let fixture;\n  let service;\n  let router;\n  beforeEach(() => {\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n    TestBed.configureTestingModule({\n      declarations: [AddSongComponent],\n      imports: [ReactiveFormsModule, HttpClientTestingModule, FormsModule],\n      providers: [SongService, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    });\n    fixture = TestBed.createComponent(AddSongComponent);\n    component = fixture.componentInstance;\n    service = TestBed.inject(SongService);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  });\n  fit('should_create_AddSongComponent', () => {\n    expect(component).toBeTruthy();\n  });\n  fit('should_add_all_the_required_fields', () => {\n    const form = component.songForm;\n    expect(form.get('title')).toBeTruthy();\n    expect(form.get('artist')).toBeTruthy();\n    expect(form.get('album')).toBeTruthy();\n    expect(form.get('genre')).toBeTruthy();\n    expect(form.get('releaseDate')).toBeTruthy();\n    expect(form.get('duration')).toBeTruthy();\n  });\n  fit('should_validate_duration', () => {\n    const songForm = component.songForm;\n    songForm.patchValue({\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    });\n    expect(songForm.valid).toBeTruthy();\n    songForm.patchValue({\n      duration: 0\n    });\n    expect(songForm.get('duration')?.hasError('min')).toBeTruthy();\n  });\n  fit('should_reset_form_after_successful_submission', fakeAsync(() => {\n    const validSongData = {\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    };\n    const expectedSongData = {\n      ...validSongData,\n      releaseDate: validSongData.releaseDate\n    };\n    spyOn(service, 'addSong').and.returnValue(of(expectedSongData));\n    component.songForm.setValue(validSongData);\n    component.onSubmit();\n    tick();\n    expect(component.songForm.pristine).toBeTruthy();\n    expect(component.songForm.untouched).toBeTruthy();\n  }));\n  fit('should_navigate_to_song_list_after_successful_submission', fakeAsync(() => {\n    const validSongData = {\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    };\n    const expectedSongData = {\n      ...validSongData,\n      releaseDate: validSongData.releaseDate\n    };\n    spyOn(service, 'addSong').and.returnValue(of(expectedSongData));\n    component.songForm.setValue(validSongData);\n    component.onSubmit();\n    tick();\n    expect(router.navigate).toHaveBeenCalledWith(['/songs']);\n  }));\n});","map":{"version":3,"names":["TestBed","fakeAsync","tick","ReactiveFormsModule","FormsModule","AddSongComponent","SongService","of","HttpClientTestingModule","Router","describe","component","fixture","service","router","beforeEach","routerSpy","jasmine","createSpyObj","configureTestingModule","declarations","imports","providers","provide","useValue","createComponent","componentInstance","inject","detectChanges","fit","expect","toBeTruthy","form","songForm","get","patchValue","title","artist","album","genre","releaseDate","duration","valid","hasError","validSongData","expectedSongData","spyOn","and","returnValue","setValue","onSubmit","pristine","untouched","navigate","toHaveBeenCalledWith"],"sources":["/home/coder/project/workspace/angularapp/src/app/add-song/add-song.component.spec.ts"],"sourcesContent":["// add-song.component.spec.ts\n\nimport { ComponentFixture, TestBed, fakeAsync, tick } from '@angular/core/testing';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { AddSongComponent } from './add-song.component';\nimport { SongService } from '../services/song.service';\nimport { of } from 'rxjs';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { Song } from '../model/song.model';\n\ndescribe('AddSongComponent', () => {\n  let component: AddSongComponent;\n  let fixture: ComponentFixture<AddSongComponent>;\n  let service: SongService;\n  let router: jasmine.SpyObj<Router>;\n\n  beforeEach(() => {\n    const routerSpy = jasmine.createSpyObj('Router', ['navigate']);\n  \n    TestBed.configureTestingModule({\n      declarations: [AddSongComponent],\n      imports: [ReactiveFormsModule, HttpClientTestingModule, FormsModule],\n      providers: [\n        SongService,\n        { provide: Router, useValue: routerSpy }\n      ],\n    });\n    fixture = TestBed.createComponent(AddSongComponent);\n    component = fixture.componentInstance;\n    service = TestBed.inject(SongService);\n    router = TestBed.inject(Router) as jasmine.SpyObj<Router>;\n    fixture.detectChanges();\n  });\n\n  fit('should_create_AddSongComponent', () => {\n    expect((component as any)).toBeTruthy();\n  });\n\n  fit('should_add_all_the_required_fields', () => {\n    const form = (component as any).songForm;\n    expect(form.get('title')).toBeTruthy();\n    expect(form.get('artist')).toBeTruthy();\n    expect(form.get('album')).toBeTruthy();\n    expect(form.get('genre')).toBeTruthy();\n    expect(form.get('releaseDate')).toBeTruthy();\n    expect(form.get('duration')).toBeTruthy();\n  });\n\n  fit('should_validate_duration', () => {\n    const songForm = (component as any).songForm;\n    songForm.patchValue({\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    });\n    expect(songForm.valid).toBeTruthy();\n    \n    songForm.patchValue({ duration: 0 });\n    expect(songForm.get('duration')?.hasError('min')).toBeTruthy();\n  });\n\n  fit('should_reset_form_after_successful_submission', fakeAsync(() => {\n    const validSongData = {\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    };\n    const expectedSongData: Song = {\n      ...validSongData,\n      releaseDate: validSongData.releaseDate,\n    };\n    spyOn((service as any), 'addSong').and.returnValue(of(expectedSongData));\n    (component as any).songForm.setValue(validSongData);\n    (component as any).onSubmit();\n    tick();\n    expect((component as any).songForm.pristine).toBeTruthy();\n    expect((component as any).songForm.untouched).toBeTruthy();\n  }));\n\n  fit('should_navigate_to_song_list_after_successful_submission', fakeAsync(() => {\n    const validSongData = {\n      title: 'Test Song',\n      artist: 'Test Artist',\n      album: 'Test Album',\n      genre: 'Test Genre',\n      releaseDate: '2023-01-15',\n      duration: 180\n    };\n    const expectedSongData: Song = {\n      ...validSongData,\n      releaseDate: validSongData.releaseDate,\n    };\n    spyOn((service as any), 'addSong').and.returnValue(of(expectedSongData));\n    (component as any).songForm.setValue(validSongData);\n    (component as any).onSubmit();\n    tick();\n    expect(router.navigate).toHaveBeenCalledWith(['/songs']);\n  }));\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}