{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./edit-song.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./edit-song.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SongService } from '../services/song.service';\nlet EditSongComponent = class EditSongComponent {\n  constructor(fb, route, router, songService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.songService = songService;\n    this.songForm = this.fb.group({\n      title: ['', Validators.required],\n      artist: ['', Validators.required],\n      album: ['', Validators.required],\n      genre: ['', Validators.required],\n      releaseDate: ['', Validators.required],\n      duration: ['', [Validators.required, Validators.min(1)]]\n    });\n    this.songId = +this.route.snapshot.paramMap.get('id');\n    this.loadSongDetails();\n  }\n  loadSongDetails() {\n    this.songService.getSongById(this.songId).subscribe(song => this.songForm.patchValue(song), error => console.error('Error loading song details:', error));\n  }\n  onSubmit() {\n    if (this.songForm.valid) {\n      this.songService.updateSong(this.songId, this.songForm.value).subscribe(() => {\n        console.log('Song updated successfully');\n        this.router.navigate(['/songs']);\n      }, error => console.error('Error updating song:', error));\n    }\n  }\n  static {\n    this.ctorParameters = () => [{\n      type: FormBuilder\n    }, {\n      type: ActivatedRoute\n    }, {\n      type: Router\n    }, {\n      type: SongService\n    }];\n  }\n};\nEditSongComponent = __decorate([Component({\n  selector: 'app-edit-song',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  // ✅ Import ReactiveFormsModule here\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], EditSongComponent);\nexport { EditSongComponent };","map":{"version":3,"names":["Component","FormBuilder","ReactiveFormsModule","Validators","CommonModule","ActivatedRoute","Router","SongService","EditSongComponent","constructor","fb","route","router","songService","songForm","group","title","required","artist","album","genre","releaseDate","duration","min","songId","snapshot","paramMap","get","loadSongDetails","getSongById","subscribe","song","patchValue","error","console","onSubmit","valid","updateSong","value","log","navigate","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["/home/coder/project/workspace/angularapp/src/app/edit-song/edit-song.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SongService } from '../services/song.service';\n\n@Component({\n  selector: 'app-edit-song',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],  // ✅ Import ReactiveFormsModule here\n  templateUrl: './edit-song.component.html',\n  styleUrls: ['./edit-song.component.css']\n})\nexport class EditSongComponent {\n  songForm: FormGroup;\n  songId: number;\n\n  constructor(\n    private fb: FormBuilder,\n    private route: ActivatedRoute,\n    private router: Router,\n    private songService: SongService\n  ) {\n    this.songForm = this.fb.group({\n      title: ['', Validators.required],\n      artist: ['', Validators.required],\n      album: ['', Validators.required],\n      genre: ['', Validators.required],\n      releaseDate: ['', Validators.required],\n      duration: ['', [Validators.required, Validators.min(1)]]\n    });\n\n    this.songId = +this.route.snapshot.paramMap.get('id')!;\n    this.loadSongDetails();\n  }\n\n  loadSongDetails(): void {\n    this.songService.getSongById(this.songId).subscribe(\n      (song) => this.songForm.patchValue(song),\n      (error) => console.error('Error loading song details:', error)\n    );\n  }\n\n  onSubmit(): void {\n    if (this.songForm.valid) {\n      this.songService.updateSong(this.songId, this.songForm.value).subscribe(\n        () => {\n          console.log('Song updated successfully');\n          this.router.navigate(['/songs']);\n        },\n        (error) => console.error('Error updating song:', error)\n      );\n    }\n  }\n}"],"mappings":";;;AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAASC,WAAW,EAAaC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AACxF,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,cAAc,EAAEC,MAAM,QAAQ,iBAAiB;AACxD,SAASC,WAAW,QAAQ,0BAA0B;AAS/C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAI5BC,YACUC,EAAe,EACfC,KAAqB,EACrBC,MAAc,EACdC,WAAwB;IAHxB,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,KAAK,GAALA,KAAK;IACL,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,WAAW,GAAXA,WAAW;IAEnB,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAC5BC,KAAK,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACc,QAAQ,CAAC;MAChCC,MAAM,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACc,QAAQ,CAAC;MACjCE,KAAK,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACc,QAAQ,CAAC;MAChCG,KAAK,EAAE,CAAC,EAAE,EAAEjB,UAAU,CAACc,QAAQ,CAAC;MAChCI,WAAW,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACc,QAAQ,CAAC;MACtCK,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACnB,UAAU,CAACc,QAAQ,EAAEd,UAAU,CAACoB,GAAG,CAAC,CAAC,CAAC,CAAC;KACxD,CAAC;IAEF,IAAI,CAACC,MAAM,GAAG,CAAC,IAAI,CAACb,KAAK,CAACc,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAE;IACtD,IAAI,CAACC,eAAe,EAAE;EACxB;EAEAA,eAAeA,CAAA;IACb,IAAI,CAACf,WAAW,CAACgB,WAAW,CAAC,IAAI,CAACL,MAAM,CAAC,CAACM,SAAS,CAChDC,IAAI,IAAK,IAAI,CAACjB,QAAQ,CAACkB,UAAU,CAACD,IAAI,CAAC,EACvCE,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAC/D;EACH;EAEAE,QAAQA,CAAA;IACN,IAAI,IAAI,CAACrB,QAAQ,CAACsB,KAAK,EAAE;MACvB,IAAI,CAACvB,WAAW,CAACwB,UAAU,CAAC,IAAI,CAACb,MAAM,EAAE,IAAI,CAACV,QAAQ,CAACwB,KAAK,CAAC,CAACR,SAAS,CACrE,MAAK;QACHI,OAAO,CAACK,GAAG,CAAC,2BAA2B,CAAC;QACxC,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC,EACAP,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC,CACxD;IACH;EACF;;;;;;;;;;;;;AAxCWzB,iBAAiB,GAAAiC,UAAA,EAP7BzC,SAAS,CAAC;EACT0C,QAAQ,EAAE,eAAe;EACzBC,UAAU,EAAE,IAAI;EAChBC,OAAO,EAAE,CAACxC,YAAY,EAAEF,mBAAmB,CAAC;EAAG;EAC/C2C,QAAA,EAAAC,oBAAyC;;CAE1C,CAAC,C,EACWtC,iBAAiB,CAyC7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}