{"ast":null,"code":"// add-song.component.ts\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./add-song.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./add-song.component.css?ngResource\";\nimport { Component } from '@angular/core';\nimport { SongService } from '../services/song.service';\nimport { Router } from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport { FormBuilder, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet AddSongComponent = class AddSongComponent {\n  constructor(songService, router, fb) {\n    this.songService = songService;\n    this.router = router;\n    this.fb = fb;\n  }\n  ngOnInit() {\n    this.initForm();\n  }\n  initForm() {\n    this.songForm = this.fb.group({\n      title: ['', Validators.required],\n      artist: ['', Validators.required],\n      album: ['', Validators.required],\n      genre: ['', Validators.required],\n      releaseDate: ['', Validators.required],\n      duration: ['', [Validators.required, Validators.min(1)]]\n    });\n  }\n  onSubmit() {\n    if (this.songForm.valid) {\n      const newSong = this.songForm.value;\n      this.songService.addSong(newSong).subscribe(res => {\n        console.log('Song added successfully:', res);\n        this.router.navigate(['/songs']);\n      }, err => {\n        console.error('Error adding song:', err);\n      });\n    }\n  }\n  static {\n    this.ctorParameters = () => [{\n      type: SongService\n    }, {\n      type: Router\n    }, {\n      type: FormBuilder\n    }];\n  }\n};\nAddSongComponent = __decorate([Component({\n  selector: 'app-add-song',\n  standalone: true,\n  template: __NG_CLI_RESOURCE__0,\n  imports: [CommonModule, ReactiveFormsModule, RouterModule],\n  styles: [__NG_CLI_RESOURCE__1]\n})], AddSongComponent);\nexport { AddSongComponent };","map":{"version":3,"names":["Component","SongService","Router","RouterModule","FormBuilder","ReactiveFormsModule","Validators","CommonModule","AddSongComponent","constructor","songService","router","fb","ngOnInit","initForm","songForm","group","title","required","artist","album","genre","releaseDate","duration","min","onSubmit","valid","newSong","value","addSong","subscribe","res","console","log","navigate","err","error","__decorate","selector","standalone","template","__NG_CLI_RESOURCE__0","imports"],"sources":["/home/coder/project/workspace/angularapp/src/app/add-song/add-song.component.ts"],"sourcesContent":["// add-song.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { Song } from '../model/song.model';\nimport { SongService } from '../services/song.service';\nimport { Router } from '@angular/router';\nimport { RouterModule } from '@angular/router';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-add-song',\n  standalone: true,\n  templateUrl: './add-song.component.html',\n  imports: [CommonModule, ReactiveFormsModule, RouterModule],\n  styleUrls: ['./add-song.component.css'],\n})\nexport class AddSongComponent implements OnInit {\n  songForm: FormGroup;\n\n  constructor(\n    private songService: SongService,\n    private router: Router,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit(): void {\n    this.initForm();\n  }\n\n  initForm(): void {\n    this.songForm = this.fb.group({\n      title: ['', Validators.required],\n      artist: ['', Validators.required],\n      album: ['', Validators.required],\n      genre: ['', Validators.required],\n      releaseDate: ['', Validators.required],\n      duration: ['', [Validators.required, Validators.min(1)]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.songForm.valid) {\n      const newSong: Song = this.songForm.value;\n      this.songService.addSong(newSong).subscribe(\n        (res) => {\n          console.log('Song added successfully:', res);\n          this.router.navigate(['/songs']);\n        },\n        (err) => {\n          console.error('Error adding song:', err);\n        }\n      );\n    }\n  }\n}"],"mappings":"AAAA;;;;AAEA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,WAAW,EAAaC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AACxF,SAASC,YAAY,QAAQ,iBAAiB;AASvC,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAG3BC,YACUC,WAAwB,EACxBC,MAAc,EACdC,EAAe;IAFf,KAAAF,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,EAAE,GAAFA,EAAE;EACT;EAEHC,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,EAAE;EACjB;EAEAA,QAAQA,CAAA;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACH,EAAE,CAACI,KAAK,CAAC;MAC5BC,KAAK,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAChCC,MAAM,EAAE,CAAC,EAAE,EAAEb,UAAU,CAACY,QAAQ,CAAC;MACjCE,KAAK,EAAE,CAAC,EAAE,EAAEd,UAAU,CAACY,QAAQ,CAAC;MAChCG,KAAK,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACY,QAAQ,CAAC;MAChCI,WAAW,EAAE,CAAC,EAAE,EAAEhB,UAAU,CAACY,QAAQ,CAAC;MACtCK,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACY,QAAQ,EAAEZ,UAAU,CAACkB,GAAG,CAAC,CAAC,CAAC,CAAC;KACxD,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACV,QAAQ,CAACW,KAAK,EAAE;MACvB,MAAMC,OAAO,GAAS,IAAI,CAACZ,QAAQ,CAACa,KAAK;MACzC,IAAI,CAAClB,WAAW,CAACmB,OAAO,CAACF,OAAO,CAAC,CAACG,SAAS,CACxCC,GAAG,IAAI;QACNC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEF,GAAG,CAAC;QAC5C,IAAI,CAACpB,MAAM,CAACuB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC,EACAC,GAAG,IAAI;QACNH,OAAO,CAACI,KAAK,CAAC,oBAAoB,EAAED,GAAG,CAAC;MAC1C,CAAC,CACF;IACH;EACF;;;;;;;;;;;AArCW3B,gBAAgB,GAAA6B,UAAA,EAP5BrC,SAAS,CAAC;EACTsC,QAAQ,EAAE,cAAc;EACxBC,UAAU,EAAE,IAAI;EAChBC,QAAA,EAAAC,oBAAwC;EACxCC,OAAO,EAAE,CAACnC,YAAY,EAAEF,mBAAmB,EAAEF,YAAY,CAAC;;CAE3D,CAAC,C,EACWK,gBAAgB,CAsC5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}