{"ast":null,"code":"// song-list.component.spec.ts\nimport { TestBed } from '@angular/core/testing';\nimport { SongListComponent } from './song-list.component';\nimport { SongService } from '../services/song.service';\nimport { of } from 'rxjs';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\ndescribe('SongListComponent', () => {\n  let component;\n  let fixture;\n  let service;\n  let routerSpy;\n  const mockSongs = [{\n    id: 1,\n    title: 'Song 1',\n    artist: 'Artist 1',\n    album: 'Album 1',\n    genre: 'Rock',\n    releaseDate: '2023-01-15',\n    duration: 180\n  }, {\n    id: 2,\n    title: 'Song 2',\n    artist: 'Artist 2',\n    album: 'Album 2',\n    genre: 'Pop',\n    releaseDate: '2023-02-20',\n    duration: 240\n  }, {\n    id: 3,\n    title: 'Song 3',\n    artist: 'Artist 3',\n    album: 'Album 3',\n    genre: 'Jazz',\n    releaseDate: '2023-03-10',\n    duration: 300\n  }];\n  beforeEach(() => {\n    const spy = jasmine.createSpyObj('Router', ['navigate']);\n    TestBed.configureTestingModule({\n      declarations: [SongListComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule],\n      providers: [SongService, {\n        provide: Router,\n        useValue: spy\n      }]\n    });\n    fixture = TestBed.createComponent(SongListComponent);\n    component = fixture.componentInstance;\n    service = TestBed.inject(SongService);\n    routerSpy = TestBed.inject(Router);\n  });\n  fit('should_create_SongListComponent', () => {\n    expect(component).toBeTruthy();\n  });\n  fit('should_call_getSongs', () => {\n    spyOn(service, 'getSongs').and.returnValue(of(mockSongs));\n    component.ngOnInit();\n    expect(service.getSongs).toHaveBeenCalled();\n    expect(component.songs).toEqual(mockSongs);\n  });\n  fit('should_sort_songs_by_duration', () => {\n    component.songs = [...mockSongs];\n    // Trigger sort by duration (ascending)\n    component.sortSongs();\n    expect(component.songs[0].duration).toBeLessThanOrEqual(component.songs[1].duration);\n    expect(component.songs[1].duration).toBeLessThanOrEqual(component.songs[2].duration);\n    // Trigger sort again to reverse the order (descending)\n    component.sortSongs();\n    expect(component.songs[0].duration).toBeGreaterThanOrEqual(component.songs[1].duration);\n    expect(component.songs[1].duration).toBeGreaterThanOrEqual(component.songs[2].duration);\n  });\n  fit('should_navigate_to_edit_song_page', () => {\n    const songId = 1;\n    component.editSong(songId);\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/edit-song', songId]);\n  });\n});","map":{"version":3,"names":["TestBed","SongListComponent","SongService","of","RouterTestingModule","HttpClientTestingModule","Router","describe","component","fixture","service","routerSpy","mockSongs","id","title","artist","album","genre","releaseDate","duration","beforeEach","spy","jasmine","createSpyObj","configureTestingModule","declarations","imports","providers","provide","useValue","createComponent","componentInstance","inject","fit","expect","toBeTruthy","spyOn","and","returnValue","ngOnInit","getSongs","toHaveBeenCalled","songs","toEqual","sortSongs","toBeLessThanOrEqual","toBeGreaterThanOrEqual","songId","editSong","navigate","toHaveBeenCalledWith"],"sources":["/home/coder/project/workspace/angularapp/src/app/song-list/song-list.component.spec.ts"],"sourcesContent":["// song-list.component.spec.ts\n\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { SongListComponent } from './song-list.component';\nimport { SongService } from '../services/song.service';\nimport { of } from 'rxjs';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { Router } from '@angular/router';\nimport { Song } from '../model/song.model';\nimport { By } from '@angular/platform-browser';\n\ndescribe('SongListComponent', () => {\n  let component: SongListComponent;\n  let fixture: ComponentFixture<SongListComponent>;\n  let service: SongService;\n  let routerSpy: jasmine.SpyObj<Router>;\n\n  const mockSongs: Song[] = [\n    {\n      id: 1,\n      title: 'Song 1',\n      artist: 'Artist 1',\n      album: 'Album 1',\n      genre: 'Rock',\n      releaseDate: '2023-01-15',\n      duration: 180\n    },\n    {\n      id: 2,\n      title: 'Song 2',\n      artist: 'Artist 2',\n      album: 'Album 2',\n      genre: 'Pop',\n      releaseDate: '2023-02-20',\n      duration: 240\n    },\n    {\n      id: 3,\n      title: 'Song 3',\n      artist: 'Artist 3',\n      album: 'Album 3',\n      genre: 'Jazz',\n      releaseDate: '2023-03-10',\n      duration: 300\n    }\n  ];\n  \n  beforeEach(() => {\n    const spy = jasmine.createSpyObj('Router', ['navigate']);\n\n    TestBed.configureTestingModule({\n      declarations: [SongListComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule],\n      providers: [SongService, { provide: Router, useValue: spy }]\n    });\n\n    fixture = TestBed.createComponent(SongListComponent);\n    component = fixture.componentInstance;\n    service = TestBed.inject(SongService);\n    routerSpy = TestBed.inject(Router) as jasmine.SpyObj<Router>;\n  });\n\n  fit('should_create_SongListComponent', () => {\n    expect((component as any)).toBeTruthy();\n  });\n\n  fit('should_call_getSongs', () => {\n    spyOn((service as any), 'getSongs').and.returnValue(of(mockSongs));\n    (component as any).ngOnInit();\n    expect((service as any).getSongs).toHaveBeenCalled();\n    expect((component as any).songs).toEqual(mockSongs);\n  });\n\n  fit('should_sort_songs_by_duration', () => {\n    (component as any).songs = [...mockSongs];\n    \n    // Trigger sort by duration (ascending)\n    (component as any).sortSongs();\n    expect((component as any).songs[0].duration).toBeLessThanOrEqual((component as any).songs[1].duration);\n    expect((component as any).songs[1].duration).toBeLessThanOrEqual((component as any).songs[2].duration);\n    \n    // Trigger sort again to reverse the order (descending)\n    (component as any).sortSongs();\n    expect((component as any).songs[0].duration).toBeGreaterThanOrEqual((component as any).songs[1].duration);\n    expect((component as any).songs[1].duration).toBeGreaterThanOrEqual((component as any).songs[2].duration);\n  });\n\n  fit('should_navigate_to_edit_song_page', () => {\n    const songId = 1;\n    (component as any).editSong(songId);\n    expect(routerSpy.navigate).toHaveBeenCalledWith(['/edit-song', songId]);\n  });\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}